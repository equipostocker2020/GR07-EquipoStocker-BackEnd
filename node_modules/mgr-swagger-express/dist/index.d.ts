import { Express } from 'express';
declare const generateSwagger: (config: SwaggerConfig) => {
    swagger: string;
    info: {
        version: string;
        title: string;
        description: string;
    };
    host: string;
    basePath: string;
    schemes: string[];
    consumes: string[];
    produces: string[];
    paths: any;
    definitions: any;
};
export default generateSwagger;
export declare const SET_EXPRESS_APP: (expressApp: Express) => void;
export declare const GET: (config: SwaggerEndpoint) => (target: any, propertyKey: string) => TypedPropertyDescriptor<(args: object, context: Context) => Promise<any>>;
export declare const POST: (config: SwaggerEndpoint) => (target: any, propertyKey: string) => TypedPropertyDescriptor<(args: object, context: Context) => Promise<any>>;
export declare const PUT: (config: SwaggerEndpoint) => (target: any, propertyKey: string) => TypedPropertyDescriptor<(args: object, context: Context) => Promise<any>>;
export declare const DELETE: (config: SwaggerEndpoint) => (target: any, propertyKey: string) => TypedPropertyDescriptor<(args: object, context: Context) => Promise<any>>;
export declare const addSwaggerDefinition: (name: string, definition: object) => void;
export declare type ID = string;
export declare type Context = {
    author: ID;
    organization: ID;
    roles: string[];
};
export declare type Error = {
    code: number;
    message: string;
};
export declare type SwaggerURLParameter = {
    name: string;
    description: string;
    type?: string;
};
export declare type SwaggerBodyParameter = {
    name: string;
    description: string;
    required: boolean;
    schema?: any;
    type: string;
    items?: object;
};
export declare type SwaggerQueryField = {
    name: string;
    type: string;
    required?: boolean;
    items?: object;
};
export declare type SwaggerQueryParameter = {
    name: string;
    description: string;
    items: SwaggerQueryField[];
};
export declare type SwaggerParameter = {
    in?: string;
    example?: any;
} & (SwaggerURLParameter | SwaggerBodyParameter | SwaggerQueryParameter);
export declare type SwaggerSuccessResponse = string;
export declare type SwaggerEndpoint = {
    path: string;
    auth?: string;
    description?: string;
    tags?: string[];
    parameters?: SwaggerURLParameter[];
    query?: SwaggerQueryParameter;
    body?: SwaggerBodyParameter;
    success?: SwaggerSuccessResponse;
};
export declare type SwaggerConfig = {
    version: string;
    name: string;
    description: string;
    host: string;
    basePath: string;
};
