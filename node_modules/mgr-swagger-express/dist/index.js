"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var app;
var paths = {};
var definitions = {};
var addSwaggerEndpoint = function (config, method) {
    if (!paths[config.path]) {
        paths[config.path] = {};
    }
    if (paths[config.path][method.toLowerCase()]) {
        throw new Error(method.toUpperCase() + " " + config.path + " has been already declared");
    }
    var responses = config.success ? {
        200: {
            description: 'OK',
            schema: {
                $ref: config.success,
            },
        },
    } : undefined;
    var parameters = [];
    if (config.auth) {
        parameters.push({
            name: config.auth,
            description: 'User JWT token',
            required: true,
            type: 'string',
            in: 'header',
            example: 'user_id;organization_id;READER,WRITER',
        });
    }
    parameters = __spreadArrays(utils_1.transformURLParameters2Swagger(config.parameters), utils_1.transformBody2Swagger(config.body), utils_1.transformQuery2Swagger(config.query));
    paths[config.path][method.toLowerCase()] = {
        description: config.description,
        tags: config.tags,
        parameters: parameters,
        responses: responses,
    };
    return function (target, propertyKey) {
        var handler = target[propertyKey];
        var expressPath = config.path.replace(/{([a-zA-Z]+)}/g, ':$1');
        app[method.toLowerCase()](expressPath, function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
            var args, context, result, e_1;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        args = {};
                        if (config.parameters) {
                            args = __assign(__assign({}, args), req.params);
                        }
                        if (config.query) {
                            args = __assign(__assign({}, args), (_a = {}, _a[config.query.name] = req.query, _a));
                        }
                        if (config.body) {
                            args = __assign(__assign({}, args), (_b = {}, _b[config.body.name] = req.body, _b));
                        }
                        context = config.auth ? utils_1.extractContextFromToken(req.header('x-auth')) : null;
                        // tslint:disable-next-line: no-console
                        console.log(propertyKey + " [" + method.toUpperCase() + " " + expressPath + "]", args, context);
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, Promise.resolve(handler(args, context))];
                    case 2:
                        result = _c.sent();
                        if (method.toUpperCase() === 'GET' && (result === null || result === undefined)) {
                            return [2 /*return*/, res.status(404).send()];
                        }
                        return [2 /*return*/, res.send(result)];
                    case 3:
                        e_1 = _c.sent();
                        return [2 /*return*/, res.status(e_1.status || 500).send({
                                error: e_1.message,
                            })];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        return target;
    };
};
var generateSwagger = function (config) { return ({
    swagger: '2.0',
    info: {
        version: config.version,
        title: config.name,
        description: config.description,
    },
    host: config.host,
    basePath: config.basePath,
    schemes: [
        'http',
    ],
    consumes: [
        'application/json',
    ],
    produces: [
        'application/json',
    ],
    paths: paths,
    definitions: __assign({}, definitions),
}); };
exports.default = generateSwagger;
exports.SET_EXPRESS_APP = function (expressApp) {
    app = expressApp;
};
exports.GET = function (config) { return addSwaggerEndpoint(config, 'GET'); };
exports.POST = function (config) { return addSwaggerEndpoint(config, 'POST'); };
exports.PUT = function (config) { return addSwaggerEndpoint(config, 'PUT'); };
exports.DELETE = function (config) { return addSwaggerEndpoint(config, 'DELETE'); };
exports.addSwaggerDefinition = function (name, definition) {
    if (definitions[name]) {
        throw new Error(name + " model has been already defined");
    }
    definitions[name] = definition;
};
